"""
Advanced Handlers for Campus Copilot
Handles poster generation and email summarization
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import logging
import os
from typing import Dict, Any

from utils.poster_generator import PosterGenerator
from utils.email_summarizer import EmailSummarizer

logger = logging.getLogger(__name__)

class AdvancedHandlers:
    """Handlers for advanced features like poster generation and email summarization"""
    
    def __init__(self):
        """Initialize advanced handlers"""
        self.poster_generator = PosterGenerator()
        self.email_summarizer = EmailSummarizer()
        
    async def handle_generate_poster(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle poster generation request"""
        try:
            # Check if user provided event details
            if not context.args:
                await self._prompt_poster_details(update)
                return
            
            # Parse event details from command arguments
            event_text = " ".join(context.args)
            event_details = self._parse_event_details(event_text)
            
            # Generate poster
            await update.message.reply_text("🎨 Generating your event poster... This may take a moment.")
            
            poster_path = self.poster_generator.generate_event_poster(event_details)
            
            if poster_path and os.path.exists(poster_path):
                # Send the generated poster
                with open(poster_path, 'rb') as poster_file:
                    await update.message.reply_photo(
                        photo=poster_file,
                        caption=f"🎨 **Event Poster Generated!**\n\n"
                               f"**Event:** {event_details.get('title', 'Campus Event')}\n"
                               f"**Date:** {event_details.get('date', 'TBD')}\n"
                               f"**Time:** {event_details.get('time', 'TBD')}\n"
                               f"**Location:** {event_details.get('location', 'Campus')}\n\n"
                               f"*Generated by Campus Copilot*",
                        parse_mode=ParseMode.MARKDOWN
                    )
            else:
                await update.message.reply_text(
                    "❌ Sorry, I couldn't generate the poster. Please try again with more details."
                )
                
        except Exception as e:
            logger.error(f"Error handling poster generation: {e}")
            await update.message.reply_text(
                "🚨 An error occurred while generating the poster. Please try again."
            )
    
    async def handle_summarize_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle email summarization request"""
        try:
            # Check if user provided email content
            if not context.args:
                await self._prompt_email_content(update)
                return
            
            # Get email content from command arguments
            email_content = " ".join(context.args)
            
            if len(email_content) < 50:
                await update.message.reply_text(
                    "📧 The email content seems too short to summarize. Please provide a longer email text."
                )
                return
            
            # Summarize email
            await update.message.reply_text("📧 Analyzing and summarizing your email...")
            
            summary_data = self.email_summarizer.summarize_email(email_content)
            
            # Format and send summary
            formatted_summary = self.email_summarizer.format_summary_for_telegram(summary_data)
            
            await update.message.reply_text(
                formatted_summary,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error handling email summarization: {e}")
            await update.message.reply_text(
                "🚨 An error occurred while summarizing the email. Please try again."
            )
    
    async def handle_summarize_notice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle notice summarization request"""
        try:
            # Check if user provided notice content
            if not context.args:
                await self._prompt_notice_content(update)
                return
            
            # Get notice content from command arguments
            notice_content = " ".join(context.args)
            
            if len(notice_content) < 50:
                await update.message.reply_text(
                    "📋 The notice content seems too short to summarize. Please provide a longer notice text."
                )
                return
            
            # Summarize notice
            await update.message.reply_text("📋 Analyzing and summarizing the notice...")
            
            summary_data = self.email_summarizer.summarize_notice(notice_content)
            
            # Format summary for notice
            formatted_summary = self._format_notice_summary(summary_data)
            
            await update.message.reply_text(
                formatted_summary,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error handling notice summarization: {e}")
            await update.message.reply_text(
                "🚨 An error occurred while summarizing the notice. Please try again."
            )
    
    async def handle_list_posters(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle request to list generated posters"""
        try:
            posters = self.poster_generator.list_generated_posters()
            
            if not posters:
                await update.message.reply_text(
                    "🎨 No posters have been generated yet.\n\n"
                    "Use `/generate_poster` to create your first event poster!"
                )
                return
            
            message = "🎨 **Generated Posters:**\n\n"
            for i, poster_path in enumerate(posters[:10], 1):  # Show last 10
                filename = os.path.basename(poster_path)
                # Remove timestamp and extension for display
                display_name = filename.replace('.txt', '').replace('.png', '')
                display_name = '_'.join(display_name.split('_')[:-1])  # Remove timestamp
                message += f"{i}. {display_name.replace('_', ' ').title()}\n"
            
            if len(posters) > 10:
                message += f"\n*... and {len(posters) - 10} more*"
            
            message += "\n\nUse `/generate_poster` to create a new poster!"
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error listing posters: {e}")
            await update.message.reply_text(
                "🚨 An error occurred while listing posters."
            )
    
    def _parse_event_details(self, event_text: str) -> Dict[str, Any]:
        """Parse event details from text input"""
        # Simple parsing - in production, this could use NLP for better extraction
        details = {
            "title": "Campus Event",
            "date": "TBD",
            "time": "TBD",
            "location": "Campus",
            "description": event_text,
            "theme": "modern academic",
            "colors": "blue and white"
        }
        
        # Try to extract specific information
        text_lower = event_text.lower()
        
        # Extract title (first part before date/time keywords)
        title_keywords = ["on", "at", "date:", "time:", "location:"]
        title_end = len(event_text)
        for keyword in title_keywords:
            pos = text_lower.find(keyword)
            if pos != -1 and pos < title_end:
                title_end = pos
        
        if title_end < len(event_text):
            details["title"] = event_text[:title_end].strip()
        
        # Extract date patterns
        import re
        date_patterns = [
            r'\b\d{1,2}[/-]\d{1,2}[/-]\d{2,4}\b',
            r'\b(january|february|march|april|may|june|july|august|september|october|november|december)\s+\d{1,2},?\s+\d{2,4}\b',
            r'\b(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b'
        ]
        
        for pattern in date_patterns:
            match = re.search(pattern, text_lower)
            if match:
                details["date"] = match.group()
                break
        
        # Extract time patterns
        time_patterns = [
            r'\b\d{1,2}:\d{2}\s*(am|pm)?\b',
            r'\b\d{1,2}\s*(am|pm)\b'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, text_lower)
            if match:
                details["time"] = match.group()
                break
        
        return details
    
    def _format_notice_summary(self, summary_data: Dict[str, Any]) -> str:
        """Format notice summary for Telegram"""
        try:
            formatted = f"📋 **Notice Summary**\n\n"
            
            if summary_data.get("title"):
                formatted += f"**Title:** {summary_data['title']}\n"
            
            formatted += f"**Urgency:** {summary_data.get('urgency', 'Unknown')}\n\n"
            
            formatted += f"**Summary:**\n{summary_data.get('summary', 'No summary available')}\n\n"
            
            if summary_data.get("key_points"):
                formatted += "**Key Points:**\n"
                for point in summary_data["key_points"]:
                    formatted += f"• {point}\n"
                formatted += "\n"
            
            if summary_data.get("important_dates"):
                formatted += "**Important Dates:**\n"
                for date in summary_data["important_dates"]:
                    formatted += f"📅 {date}\n"
                formatted += "\n"
            
            if summary_data.get("affected_groups"):
                formatted += "**Affected Groups:**\n"
                for group in summary_data["affected_groups"]:
                    formatted += f"👥 {group}\n"
            
            return formatted
            
        except Exception as e:
            logger.error(f"Error formatting notice summary: {e}")
            return "Error formatting notice summary"
    
    async def _prompt_poster_details(self, update: Update) -> None:
        """Prompt user for poster details"""
        message = """
🎨 **Generate Event Poster**

To create a poster, please provide event details in this format:

`/generate_poster Event Title on March 15, 2024 at 7:00 PM in Main Auditorium`

**Example:**
`/generate_poster Spring Festival on April 20, 2024 at 6:00 PM in Campus Quad - Join us for music, food, and fun!`

**You can include:**
• Event title
• Date and time
• Location
• Brief description

I'll create a professional poster for your event! 🎨
        """
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def _prompt_email_content(self, update: Update) -> None:
        """Prompt user for email content"""
        message = """
📧 **Summarize Email**

To summarize an email, please provide the email content:

`/summarize_email [paste your email content here]`

**Example:**
`/summarize_email Dear students, This is to inform you about the upcoming midterm examinations scheduled for next week. Please note that all exams will be held in the main examination hall...`

I'll analyze the email and provide:
• Key summary
• Important points
• Action items
• Deadlines
• Priority level

📧 Ready to help you process those long emails!
        """
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def _prompt_notice_content(self, update: Update) -> None:
        """Prompt user for notice content"""
        message = """
📋 **Summarize Notice**

To summarize a college notice or announcement, please provide the content:

`/summarize_notice [paste your notice content here]`

**Example:**
`/summarize_notice NOTICE: New Library Hours - Effective immediately, the library will be open from 8 AM to 10 PM on weekdays and 10 AM to 6 PM on weekends...`

I'll analyze the notice and provide:
• Key summary
• Important points
• Affected groups
• Deadlines
• Urgency level

📋 Perfect for processing college announcements!
        """
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

